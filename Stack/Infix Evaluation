// Given an exp evaluate it

// code 

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

class GFG {
    public static int precedence(char op) {
        if(op == '+' || op == '-') {
            return 1;
        }
        else if(op == '*' || op == '/') {
            return 2;
        }
        return 0;
    }
    
    public static int solve(int v1, int v2, char op) {
        if(op == '+') {
            return v1 + v2;
        }
        else if(op == '-') {
            return v1 - v2;
        }
        else if(op== '*') {
            return v1 * v2;
        }
        
        return v1 / v2;
    }
    
    
    public static int EvaluateInfixExp(String exp) {
        Stack<Character> oprator = new Stack<>();
        Stack<Integer> opnds = new Stack<>();
        
        for(int i=0; i<exp.length(); i++) {
            char ch = exp.charAt(i);
            
            if(ch == '(') {
                oprator.push(ch);
            }
            
            else if(Character.isDigit(ch)) {
                opnds.push(ch - '0');
            }
            
            else if(ch == ')') {
                while(oprator.size() > 0 && oprator.peek() != '(') {
                    int v1 = opnds.pop();
                    int v2 = opnds.pop();
                    char op = oprator.pop();
                    int eval = solve(v1, v2, op);
                    opnds.push(eval);
                }
                // remove the '('
                oprator.pop();
            }
            
            else if(ch == '+' || ch == '-' || ch == '*' || ch== '/') {
                while(oprator.size() > 0 && oprator.peek() != '(' && precedence(ch) < precedence(oprator.peek())) {
                    int v1 = opnds.pop();
                    int v2 = opnds.pop();
                    char op = oprator.pop();
                    int eval = solve(v1, v2, op);
                    opnds.push(eval);
                }
                oprator.push(ch);
            }
        }
        
        while(oprator.size() != 0) {
            int v1 = opnds.pop();
            int v2 = opnds.pop();
            char op = oprator.pop();
            int eval = solve(v1, v2, op);
            opnds.push(eval);
        }
        
        return opnds.peek();
    }
    
	public static void main (String[] args) {
		String exp = "2+(5*(3+6))/15-2";
		int ans = EvaluateInfixExp(exp);
		System.out.println(ans);
	}
}
