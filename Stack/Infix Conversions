// Given an Infix expression convert it to Prefix and Postfix expression

// CODE

/*package whatever //do not write package name here */

import java.io.*;
import java.util.*;

// op v1 v2
// v1 v2 op

class GFG {
    public static int precedence(char op) {
        if(op == '+' || op == '-') {
            return 1;
        }
        else if(op == '*' || op == '/') {
            return 2;
        }
        return 0;
    }
    
    public static int EvaluateInfixExp(String exp) {
        Stack<Character> oprator = new Stack<>();
        Stack<Integer> opnds = new Stack<>();
        
        for(int i=0; i<exp.length(); i++) {
            char ch = exp.charAt(i);
            
            if(ch == '(') {
                oprator.push(ch);
            }
            
            else if(Character.isDigit(ch)) {
                opnds.push(ch - '0');
            }
            
            else if(ch == ')') {
                while(oprator.size() > 0 && oprator.peek() != '(') {
                    int v1 = opnds.pop();
                    int v2 = opnds.pop();
                    char op = oprator.pop();
                    int eval = solve(v1, v2, op);
                    opnds.push(eval);
                }
                // remove the '('
                oprator.pop();
            }
            
            else if(ch == '+' || ch == '-' || ch == '*' || ch== '/') {
                while(oprator.size() > 0 && oprator.peek() != '(' && precedence(ch) < precedence(oprator.peek())) {
                    int v1 = opnds.pop();
                    int v2 = opnds.pop();
                    char op = oprator.pop();
                    int eval = solve(v1, v2, op);
                    opnds.push(eval);
                }
                oprator.push(ch);
            }
        }
        
        while(oprator.size() != 0) {
            int v1 = opnds.pop();
            int v2 = opnds.pop();
            char op = oprator.pop();
            int eval = solve(v1, v2, op);
            opnds.push(eval);
        }
        
        return opnds.peek();
    }
    
    public static void InfixConversions(String exp) {
        Stack<String> prefix = new Stack<>();
        Stack<String> postfix = new Stack<>();
        
        Stack<Character> operators = new Stack<>(); 
        
        for(int i=0; i<exp.length(); i++) {
            char ch = exp.charAt(i);
            if(ch == '(') {
                operators.push(ch);
            }
            else if((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
                prefix.push(ch + "");
                postfix.push(ch + "");
            }
            else if (ch == ')') {
                while(operators.peek() != '(') {
                    char op = operators.pop();
                    
                    String prev2 = prefix.pop();
                    String prev1 = prefix.pop();
                    String prev = op + prev1 + prev2;
                    prefix.push(prev);
                    
                    String postv2 = postfix.pop();
                    String postv1 = postfix.pop();
                    String postv = postv1 + postv2 + op;
                    postfix.push(postv);
                }
                operators.pop(); //remove open brac 
            }
            else if(ch == '+' || ch == '*' || ch == '+' || ch == '/') {
                while(operators.size() > 0 && operators.peek() != '(' && precedence(ch) <= precedence(operators.peek())) {
                    char op = operators.pop();
                    
                    String prev2 = prefix.pop();
                    String prev1 = prefix.pop();
                    String prev = op + prev1 + prev2;
                    prefix.push(prev);
                    
                    String postv2 = postfix.pop();
                    String postv1 = postfix.pop();
                    String postv = postv1 + postv2 + op;
                    postfix.push(postv);
                }
                operators.push(ch);
            }
        }
        
        // once more because maybe stack might not be cleaned
        while(operators.size() > 0) {
            char op = operators.pop();
                    
            String prev2 = prefix.pop();
            String prev1 = prefix.pop();
            String prev = op + prev1 + prev2;
            prefix.push(prev);
            
            String postv2 = postfix.pop();
            String postv1 = postfix.pop();
            String postv = postv1 + postv2 + op;
            postfix.push(postv);
        }
        
        System.out.println("Prefix converted expression");
        System.out.println(prefix.pop());
        
        System.out.println("Postfix converted expression");
        System.out.println(postfix.pop());
    }
    
	public static void main (String[] args) {
		String exp = "a*(b-c)/d+e";
		InfixConversions(exp);
	}
}
